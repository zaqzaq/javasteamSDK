import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.ByteBuffer
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.nio.file.StandardOpenOption

plugins {
	id 'maven-publish'
	id 'cpp'
	id 'java'
	id 'xcode'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
	steamSdkDirPath = "${projectDir}/sdk/sdk_135"
	is64Bit = System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64");
}

repositories { jcenter() }

dependencies {
	// test
	testCompile "junit:junit:${junitVersion}"

	// logging
	compile "org.slf4j:slf4j-api:${slf4jVersion}"
	runtime "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
	runtime "org.apache.logging.log4j:log4j-core:${log4jVersion}"
}

// generate headers
// fixme enable caching
task nativeHeaders(dependsOn: [
		'classes']) {
	def outputDirectory = file("src/steamjni/cpp")
	def classes = [
			'steam.steam_api',
			'steam.ISteamUserStats',
			'steam.ISteamFriends',
			'steam.ISteamUser',
			'steam.ISteamUtils',
			'steam.steam_gameserver',
			'steam.ISteamGameServer',
			'steam.ISteamRemoteStorage',
			'steam.SteamUserStatsListener',
			'steam.ISteamController',
			'steam.ISteamApps'
	]
	inputs.files sourceSets.main.output
	inputs.property('classes', classes)
	outputs.dir outputDirectory
	doLast {
		outputDirectory.parentFile.mkdirs()
		exec {
			executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
			args '-d', outputDirectory
			args '-classpath', sourceSets.main.output.classesDirs.asPath
			args classes
		}

		Files.newDirectoryStream(outputDirectory.toPath()).forEach({
			path ->
				if (!path.getFileName().toString().endsWith(".h")) {
					return;
				}
				def inputChannel
				def outputChannel
				def foundCr = false
				def outputFile
				try {
					inputChannel = Files.newByteChannel(path, StandardOpenOption.READ);
					outputFile = new File(path.toFile().getAbsoluteFile().getParentFile(), "${path.getFileName()}lf")
					outputChannel = Files.newByteChannel(outputFile.toPath(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)
					foundCr = false;

					def inBuffer = ByteBuffer.allocate(1024)
					def outBuffer = ByteBuffer.allocate(inBuffer.capacity())
					while (true) {
						inBuffer.clear()
						outBuffer.clear()
						def bytesRead = inputChannel.read(inBuffer)
						if (bytesRead < 0) {
							break;
						}
						inBuffer.flip()
						while (inBuffer.remaining() > 0) {
							byte b = inBuffer.get()
							if (b == '\r') {
								foundCr = true
							} else {
								outBuffer.put(b)
							}
						}
						outBuffer.flip()
						outputChannel.write(outBuffer)
					}
				} catch (Throwable throwable) {
					println("Failed to remove carriage returns from header files")
					throwable.printStackTrace()
				} finally {
					if (inputChannel != null) {
						inputChannel.close();
					}
					if (outputChannel != null) {
						outputChannel.close();
					}
				}
				if (foundCr) {
					println("Replaced \\r in path = $path")
					Files.move(outputFile.toPath(), path, StandardCopyOption.REPLACE_EXISTING)
				} else {
					if (Files.exists(outputFile.toPath())) {
						Files.delete(outputFile.toPath())
					}
				}
		})
	}
}

// always run header generation after classes are created
classes.finalizedBy nativeHeaders

// C++
model {
	platforms {
		linux32 {
			architecture "x86"
			operatingSystem "linux"
		}
		linux64 {
			architecture "x86_64"
			operatingSystem "linux"
		}
		osx32 {
			architecture "x86"
			operatingSystem "osx"
		}
		osx64 {
			architecture "x86_64"
			operatingSystem "osx"
		}
		windows32 {
			architecture "x86"
			operatingSystem "windows"
		}
		windows64 {
			architecture "x86_64"
			operatingSystem "windows"
		}
	}

	toolChains {
		vc(VisualCpp) {
			installDir new File("C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community")
			windowsSdkDir new File("C:/Program Files/Microsoft SDKs/Windows/v7.1")
		}
		gcc(Gcc) {
		}
		clang(Clang) {
		}
	}

	components {
		steamjni(NativeLibrarySpec) {
			targetPlatform "linux32"
			targetPlatform "linux64"
			targetPlatform "osx32"
			targetPlatform "osx64"
			targetPlatform "windows32"
			targetPlatform "windows64"

			binaries.withType(StaticLibraryBinarySpec) { buildable = false }

			binaries.withType(SharedLibraryBinarySpec) {
				if (toolChain in VisualCpp) {
					cppCompiler.define "DLL_EXPORT"
					cppCompiler.define 'NG_WIN'
					cppCompiler.define '_WIN32'
					cppCompiler.define 'WIN32'
					cppCompiler.define 'UNICODE'
					cppCompiler.define '_UNICODE'
					cppCompiler.define '_WIN32_WINNT_WINXP=0x0501' // target windows xp

					cppCompiler.args '/O2'
					cppCompiler.args '/EHs'
					cppCompiler.args '/MT'
					cppCompiler.args '/nologo'
					cppCompiler.args "/IC:/Program Files/Java/jdk6/include"
					cppCompiler.args "/IC:/Program Files/Java/jdk6/include/win32"
					cppCompiler.args "/I${steamSdkDirPath}/public"

					linker.args '/nologo'
					if (targetPlatform.getName().equals("windows32")) {
						linker.args "/libpath:${steamSdkDirPath}/public/steam/lib/win32"
						linker.args "/libpath:${steamSdkDirPath}/redistributable_bin"
						linker.args 'steam_api.lib'
						linker.args '/MACHINE:X86'
					}
					if (targetPlatform.getName().equals("windows64")) {
						linker.args "/libpath:${steamSdkDirPath}/public/steam/lib/win64"
						linker.args "/libpath:${steamSdkDirPath}/redistributable_bin/win64"
						linker.args 'steam_api64.lib'
					}
					linker.args 'User32.lib'

				} else if (toolChain in Gcc) {
					// compiler define linux
					if (targetPlatform.operatingSystem.isLinux()) {
						cppCompiler.define 'NG_LIN'
					}

					cppCompiler.args '-I'
					cppCompiler.args "${steamSdkDirPath}/public"
					cppCompiler.args '-fPIC'
					cppCompiler.args '-c'
					cppCompiler.args '-fmessage-length=0'
					cppCompiler.args '-Wwrite-strings'
					cppCompiler.args '-O2'

					// compiler linux
					if (targetPlatform.getName().equals("linux32")) {
						cppCompiler.args '-m32'
					}
					if (targetPlatform.getName().equals("linux64")) {
						cppCompiler.args '-m64'
					}

					if (targetPlatform.operatingSystem.isLinux()) {
						cppCompiler.args '-I'
						cppCompiler.args '/usr/lib/jvm/java-8-openjdk-amd64/include/'
						cppCompiler.args '-I'
						cppCompiler.args '/usr/lib/jvm/java-8-openjdk-amd64/include/linux/'
					}

					// compiler osx
					if (targetPlatform.operatingSystem.isMacOsX()) {
//						cppCompiler.executable = "g++-4.0"
						cppCompiler.args '-I'
						cppCompiler.args '/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers'
					}

					// linker shared
					linker.args '-l'
					linker.args 'steam_api'

					// linker linux
					if (targetPlatform.operatingSystem.isLinux()) {
						linker.args '-shared'
					}

					if (targetPlatform.getName().equals("linux32")) {
						println("platform is linux32")
						linker.args '-L'
						linker.args "${steamSdkDirPath}/redistributable_bin/linux32"
					}
					if (targetPlatform.getName().equals("linux64")) {
						println("platform is linux64")
						linker.args '-L'
						linker.args "${steamSdkDirPath}/redistributable_bin/linux64"
					}

					// linker osx
					if (targetPlatform.operatingSystem.isMacOsX()) {
//						linker.executable = "g++-4.0"
						linker.args '-dynamiclib'
					}
					if (targetPlatform.getName().equals("osx32")) {
//						linker.args '-L'
						linker.args "-L${steamSdkDirPath}/redistributable_bin/osx32"
					}
					if (targetPlatform.getName().equals("osx64")) {
//						linker.args '-L'
						linker.args "-L${steamSdkDirPath}/redistributable_bin/osx32"
					}
				}
			}
		}
	}

	// windows
	tasks.compileSteamjniWindows32SharedLibrarySteamjniCpp {
		dependsOn nativeHeaders
	}
	tasks.compileSteamjniWindows64SharedLibrarySteamjniCpp {
		dependsOn nativeHeaders
	}
	// linux
	tasks.compileSteamjniLinux32SharedLibrarySteamjniCpp {
		dependsOn nativeHeaders
	}
	tasks.compileSteamjniLinux64SharedLibrarySteamjniCpp {
		dependsOn nativeHeaders
	}
	// windows
	tasks.compileSteamjniOsx32SharedLibrarySteamjniCpp {
		dependsOn nativeHeaders
	}
	tasks.compileSteamjniOsx64SharedLibrarySteamjniCpp {
		dependsOn nativeHeaders
	}
//	tasks{
//		forEach({theTask->println(theTask)})
//	}
//	tasks.getAsMap().forEach({ thingy, itT -> println(itT) })

}

task distribute(dependsOn: [
		'classes',
		'nativeHeaders',
		'assemble'
]) {
	description = "Copy all dll's to the dist folder"
	group = "Distribution"
	doLast {
		def steamJni32BitSharedLibrary
		def steamJni32BitSharedLibraryDist
		def steamJni64BitSharedLibrary
		def steamJni64BitSharedLibraryDist
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			steamJni32BitSharedLibrary = Paths.get("$projectDir/build/libs/steamjni/shared/windows32/steamjni.dll")
			steamJni32BitSharedLibraryDist = Paths.get("$projectDir/build/dist/steamjni.dll")

			steamJni64BitSharedLibrary = Paths.get("$projectDir/build/libs/steamjni/shared/windows64/steamjni.dll")
			steamJni64BitSharedLibraryDist = Paths.get("$projectDir/build/dist/steamjni64.dll")
		} else if (Os.isFamily(Os.FAMILY_UNIX) && !Os.isFamily(Os.FAMILY_MAC)) {
			steamJni32BitSharedLibrary = Paths.get("$projectDir/build/libs/steamjni/shared/linux32/libsteamjni.so")
			steamJni32BitSharedLibraryDist = Paths.get("$projectDir/build/dist/libsteamjni.so")

			steamJni64BitSharedLibrary = Paths.get("$projectDir/build/libs/steamjni/shared/linux64/libsteamjni.so")
			steamJni64BitSharedLibraryDist = Paths.get("$projectDir/build/dist/libsteamjni64.so")
		} else if (Os.isFamily(Os.FAMILY_MAC)) {
			println("family is mac")

			String dylib32 = Paths.get("$projectDir/build/libs/steamjni/shared/osx32/libsteamjni.dylib").toAbsolutePath().toString()
			String dylib64 = Paths.get("$projectDir/build/libs/steamjni/shared/osx64/libsteamjni.dylib").toAbsolutePath().toString()
			def dylibCombinedPath = Paths.get("$projectDir/build/dist/libsteamjni.dylib").toAbsolutePath()
			Files.createDirectories(dylibCombinedPath.getParent());
			String dylibCombined = dylibCombinedPath.toString()
			exec {
				executable 'lipo'
				args '-create'
				args '-arch'
				args 'i386'
				args dylib32
				args '-arch'
				args 'x86_64'
				args dylib64
				args '-output'
				args dylibCombined
			}
		}

		if (steamJni32BitSharedLibraryDist != null) {
			steamJni32BitSharedLibraryDist.toFile().getParentFile().mkdirs()
			Files.copy(steamJni32BitSharedLibrary, steamJni32BitSharedLibraryDist, StandardCopyOption.REPLACE_EXISTING)
		}

		if (steamJni64BitSharedLibraryDist != null) {
			steamJni64BitSharedLibraryDist.toFile().getParentFile().mkdirs()
			Files.copy(steamJni64BitSharedLibrary, steamJni64BitSharedLibraryDist, StandardCopyOption.REPLACE_EXISTING)
		}

		// copy steam redistributables
		def steamApiWin32 = Paths.get("${steamSdkDirPath}/redistributable_bin", "steam_api.dll")
		Files.copy(steamApiWin32, Paths.get("${buildDir}/dist", "steam_api.dll"), StandardCopyOption.REPLACE_EXISTING)

		def steamApiWin64 = Paths.get("${steamSdkDirPath}/redistributable_bin", "win64", "steam_api64.dll")
		Files.copy(steamApiWin64, Paths.get("${buildDir}/dist", "steam_api64.dll"), StandardCopyOption.REPLACE_EXISTING);

		def steamApiLinux32 = Paths.get("${steamSdkDirPath}/redistributable_bin", "linux32", "libsteam_api.so")
		Files.copy(steamApiLinux32, Paths.get("${buildDir}/dist", "libsteam_api.so"), StandardCopyOption.REPLACE_EXISTING)

		def steamApiLinux64 = Paths.get("${steamSdkDirPath}/redistributable_bin", "linux64", "libsteam_api.so")
		Files.copy(steamApiLinux64, Paths.get("${buildDir}/dist", "libsteam_api64.so"), StandardCopyOption.REPLACE_EXISTING);

		def steamApiOsx = Paths.get("${steamSdkDirPath}/redistributable_bin", "osx32", "libsteam_api.dylib")
		Files.copy(steamApiOsx, Paths.get("${buildDir}/dist", "libsteam_api.dylib"), StandardCopyOption.REPLACE_EXISTING);
	}
}

check {
	dependsOn(distribute)
}

test {
	dependsOn(distribute)
}

publishing {
	publications {
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			steamjnix86Publish(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'steamjni'
				version '1.0'

				artifact extension: 'dll', source: "$projectDir/build/dist/steamjni.dll"
			}

			steamjnix64Publish(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'steamjni64'
				version '1.0'

				artifact extension: 'dll', source: "$projectDir/build/dist/steamjni64.dll"
			}

			steamApiLinux32(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'libsteam_api'
				version '1.0'

				artifact extension: 'so', source: "$steamSdkDirPath/redistributable_bin/linux32/libsteam_api.so"
			}

			steamApiLinux64(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'libsteam_api64'
				version '1.0'

				artifact extension: 'so', source: "$steamSdkDirPath/redistributable_bin/linux64/libsteam_api.so"
			}

			steamApiOsx(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'libsteam_api'
				version '1.0'

				artifact extension: 'dylib', source: "$steamSdkDirPath/redistributable_bin/osx32/libsteam_api.dylib"
			}

			steamApiWindows32(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'steam_api'
				version '1.0'

				artifact extension: 'dll', source: "$steamSdkDirPath/redistributable_bin/steam_api.dll"
			}

			steamApiWindows64(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'steam_api64'
				version '1.0'

				artifact extension: 'dll', source: "$steamSdkDirPath/redistributable_bin/win64/steam_api64.dll"
			}
		} else if (Os.isFamily(Os.FAMILY_UNIX) && !Os.isFamily(Os.FAMILY_MAC)) {
			steamjnix86Publish(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'libsteamjni'
				version '1.0'

				artifact extension: 'so', source: "$projectDir/build/dist/libsteamjni.so"
			}

			steamjnix64Publish(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'libsteamjni64'
				version '1.0'

				artifact extension: 'so', source: "$projectDir/build/dist/libsteamjni64.so"
			}
		} else if (Os.isFamily(Os.FAMILY_MAC)) {
			steamjnix86Publish(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'libsteamjni'
				version '1.0'

				artifact extension: 'dylib', source: "$projectDir/build/dist/libsteamjni.dylib"
			}
		}
	}

	repositories {
		maven {
			url 'https://artifactory.nimblygames.com/artifactory/gradle-release-local/'
			credentials {
				username rootProject.findProperty("artifactory_user")
				password rootProject.findProperty("artifactory_password")
			}
		}
	}
}

// fixme need publish tasks to depend on distribute... can't figure out a way to do this
//if(tasks.getByName("publishSteamApiLinux32PublicationToMavenLocal") != null) {
//	tasks publishSteamApiLinux32PublicationToMavenLocal { dependsOn(distribute) }
//}

//	publishSteamApiLinux32PublicationToMavenRepository{dependsOn(distribute)}
//	publishSteamApiLinux64PublicationToMavenLocal{dependsOn(distribute)}
//	publishSteamApiLinux64PublicationToMavenRepository{dependsOn(distribute)}
//	publishSteamApiOsxPublicationToMavenLocal{dependsOn(distribute)}
//	publishSteamApiOsxPublicationToMavenRepository{dependsOn(distribute)}
//	publishSteamApiWindows32PublicationToMavenLocal{dependsOn(distribute)}
//	publishSteamApiWindows32PublicationToMavenRepository{dependsOn(distribute)}
//	publishSteamApiWindows64PublicationToMavenLocal{dependsOn(distribute)}
//	publishSteamApiWindows64PublicationToMavenRepository{dependsOn(distribute)}
//	publishSteamjnix64PublishPublicationToMavenLocal{dependsOn(distribute)}
//	publishSteamjnix64PublishPublicationToMavenRepository{dependsOn(distribute)}
//	publishSteamjnix86PublishPublicationToMavenLocal{dependsOn(distribute)}
//	publishSteamjnix86PublishPublicationToMavenRepository{dependsOn(distribute)}
