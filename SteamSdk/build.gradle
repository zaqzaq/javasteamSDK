import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.ByteBuffer
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.nio.file.StandardOpenOption

apply from: file('../build.gradle')
apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8
apply plugin: 'cpp'

buildscript {
	repositories { jcenter() }
	dependencies { classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release" }
}

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'

ext { steamSdkDirPath = "${projectDir}/sdk/sdk_135" }

repositories { jcenter() }

dependencies {
	// test
	testCompile "junit:junit:${junitVersion}"

	// logging
	compile "org.slf4j:slf4j-api:${slf4jVersion}"
}

publishing {
	publications {
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			steamjnix86Publish(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'steamjni'
				version '1.0'

				artifact extension: 'dll', source: "$projectDir/dist/steamjni.dll"
			}

			steamjnix64Publish(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'steamjni64'
				version '1.0'

				artifact extension: 'dll', source: "$projectDir/dist/steamjni64.dll"
			}
		} else if (Os.isFamily(Os.FAMILY_UNIX)) {
			steamjnix86Publish(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'libsteamjni'
				version '1.0'

				artifact extension: 'so', source: "$projectDir/dist/libsteamjni.so"
			}

			steamjnix64Publish(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'libsteamjni64'
				version '1.0'

				artifact extension: 'so', source: "$projectDir/dist/libsteamjni64.so"
			}
		} else if (Os.isFamily(Os.FAMILY_MAC)) {
			steamjnix86Publish(MavenPublication) {
				groupId 'com.nimblygames'
				artifactId 'libsteamjni'
				version '1.0'

				artifact extension: 'dylib', source: "$projectDir/dist/libsteamjni.dylib"
			}
		}
	}
}

// generate headers
// fixme enable caching
task nativeHeaders(dependsOn: [
		'classes']) {
	def outputDirectory = file("src/steamjni/cpp")
	def classes = [
			'steam.steam_api',
			'steam.ISteamUserStats',
			'steam.ISteamFriends',
			'steam.ISteamUser',
			'steam.ISteamUtils',
			'steam.steam_gameserver',
			'steam.ISteamGameServer',
			'steam.ISteamRemoteStorage',
			'steam.SteamUserStatsListener',
			'steam.ISteamController',
			'steam.ISteamApps'
	]
	doLast {
		outputDirectory.parentFile.mkdirs()
		exec {
			executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
			args '-d', outputDirectory
			args '-classpath', sourceSets.main.output.classesDirs.asPath
			args classes
		}

		Files.newDirectoryStream(outputDirectory.toPath()).forEach({
			path ->
				if (!path.getFileName().toString().endsWith(".h")) {
					return;
				}
				def inputChannel
				def outputChannel
				def foundCr = false
				def outputFile
				try {
					inputChannel = Files.newByteChannel(path, StandardOpenOption.READ);
					outputFile = new File(path.toFile().getAbsoluteFile().getParentFile(), "${path.getFileName()}lf")
					outputChannel = Files.newByteChannel(outputFile.toPath(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)
					foundCr = false;

					def inBuffer = ByteBuffer.allocate(1024)
					def outBuffer = ByteBuffer.allocate(inBuffer.capacity())
					while (true) {
						inBuffer.clear()
						outBuffer.clear()
						def bytesRead = inputChannel.read(inBuffer)
						if (bytesRead < 0) {
							break;
						}
						inBuffer.flip()
						while (inBuffer.remaining() > 0) {
							byte b = inBuffer.get()
							if (b == '\r') {
								foundCr = true
							} else {
								outBuffer.put(b)
							}
						}
						outBuffer.flip()
						outputChannel.write(outBuffer)
					}
				} catch (Throwable throwable) {
					println("Failed to remove carriage returns from header files")
					throwable.printStackTrace()
				} finally {
					if (inputChannel != null) {
						inputChannel.close();
					}
					if (outputChannel != null) {
						outputChannel.close();
					}
				}
				if (foundCr) {
					println("Replaced \\r in path = $path")
					Files.move(outputFile.toPath(), path, StandardCopyOption.REPLACE_EXISTING)
				} else {
					if (Files.exists(outputFile.toPath())) {
						Files.delete(outputFile.toPath())
					}
				}
		})
	}
}

// always run header generation after classes are created
classes.finalizedBy nativeHeaders

// C++
model {
	platforms {
		linux32 {
			architecture "x86"
			operatingSystem "linux"
		}
		linux64 {
			architecture "x86_64"
			operatingSystem "linux"
		}
		osx32 {
			architecture "x86"
			operatingSystem "osx"
		}
		osx64 {
			architecture "x86_64"
			operatingSystem "osx"
		}
		windows32 {
			architecture "x86"
			operatingSystem "windows"
		}
		windows64 {
			architecture "x86_64"
			operatingSystem "windows"
		}
	}

	toolChains {
		vc(VisualCpp) {
			installDir new File("C:/Program Files (x86)/Microsoft Visual Studio 10.0")
			windowsSdkDir new File("C:/Program Files/Microsoft SDKs/Windows/v7.1")
		}
		gcc(Gcc) {
		}
	}

	components {
		steamjni(NativeLibrarySpec) {
			targetPlatform "linux32"
			targetPlatform "linux64"
			targetPlatform "osx32"
			targetPlatform "osx64"
			targetPlatform "windows32"
			targetPlatform "windows64"

			binaries.withType(StaticLibraryBinarySpec) { buildable = false }

			binaries.withType(SharedLibraryBinarySpec) {
				if (toolChain in VisualCpp) {
					cppCompiler.define "DLL_EXPORT"
					cppCompiler.define 'NG_WIN'
					cppCompiler.define '_WIN32'
					cppCompiler.define '_MSC_VER=1600'
					cppCompiler.define 'WIN32'
					cppCompiler.define 'UNICODE'
					cppCompiler.define '_UNICODE'
					cppCompiler.define '_WIN32_WINNT_WINXP=0x0501' // target windows xp

					cppCompiler.args '/O2'
					cppCompiler.args '/EHs'
					cppCompiler.args '/MT'
					cppCompiler.args '/nologo'
					cppCompiler.args "/IC:/Program Files/Java/jdk6/include"
					cppCompiler.args "/IC:/Program Files/Java/jdk6/include/win32"
					cppCompiler.args "/I${steamSdkDirPath}/public"

					linker.args '/nologo'
					if (targetPlatform.getName().equals("windows32")) {
						linker.args "/libpath:${steamSdkDirPath}/public/steam/lib/win32"
						linker.args "/libpath:${steamSdkDirPath}/redistributable_bin"
						linker.args 'steam_api.lib'
					}
					if (targetPlatform.getName().equals("windows64")) {
						linker.args "/libpath:${steamSdkDirPath}/public/steam/lib/win32"
						linker.args "/libpath:${steamSdkDirPath}/redistributable_bin/win64"
						linker.args 'steam_api64.lib'
					}
					linker.args 'User32.lib'
				} else if (toolChain in Gcc) {
					// compiler define linux
					if (targetPlatform.operatingSystem.isLinux()) {
						cppCompiler.define 'NG_LIN'
					}

					cppCompiler.args '-I'
					cppCompiler.args "${steamSdkDirPath}/public"
					cppCompiler.args '-fPIC'
					cppCompiler.args '-c'
					cppCompiler.args '-fmessage-length=0'
					cppCompiler.args '-Wwrite-strings'
					cppCompiler.args '-O2'

					// compiler linux
					if (targetPlatform.getName().equals("linux32")) {
						cppCompiler.args '-m32'
					}
					if (targetPlatform.getName().equals("linux64")) {
						cppCompiler.args '-m64'
					}

					if (targetPlatform.operatingSystem.isLinux()) {
						cppCompiler.args '-I'
						cppCompiler.args '/usr/lib/jvm/java-8-openjdk-amd64/include/'
						cppCompiler.args '-I'
						cppCompiler.args '/usr/lib/jvm/java-8-openjdk-amd64/include/linux/'
					}

					// compiler osx
					if (targetPlatform.operatingSystem.isMacOsX()) {
						cppCompiler.executable = "g++-4.0"
						cppCompiler.args '-I'
						cppCompiler.args '/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers'
					}

					// linker shared
					linker.args '-l'
					linker.args 'steam_api'

					// linker linux
					if (targetPlatform.operatingSystem.isLinux()) {
						linker.args '-shared'
					}

					if (targetPlatform.getName().equals("linux32")) {
						println("platform is linux32")
						linker.args '-L'
						linker.args "${steamSdkDirPath}/redistributable_bin/linux32"
					}
					if (targetPlatform.getName().equals("linux64")) {
						println("platform is linux64")
						linker.args '-L'
						linker.args "${steamSdkDirPath}/redistributable_bin/linux64"
					}

					// linker osx
					if (targetPlatform.operatingSystem.isMacOsX()) {
						linker.executable = "g++-4.0"
						linker.args '-dynamiclib'
					}
					if (targetPlatform.getName().equals("osx32")) {
						linker.args '-L'
						linker.args "${steamSdkDirPath}/redistributable_bin/osx32"
					}
					if (targetPlatform.getName().equals("osx64")) {
						linker.args '-L'
						linker.args "${steamSdkDirPath}/redistributable_bin/osx64"
					}
				}
			}
		}
	}
}

// fixme need to update dependsOn based on OS
task distribute(dependsOn: [
		'classes',
		'nativeHeaders',
		'assemble'
]) {
	description = "Copy all dll's to the dist folder"
	group = "Distribution"
	doLast {
		def steamJni32BitSharedLibrary
		def steamJni32BitSharedLibraryDist
		def steamJni64BitSharedLibrary
		def steamJni64BitSharedLibraryDist
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			steamJni32BitSharedLibrary = Paths.get("$projectDir/build/libs/steamjni/shared/windows32/steamjni.dll")
			steamJni32BitSharedLibraryDist = Paths.get("$projectDir/dist/steamjni.dll")

			steamJni64BitSharedLibrary = Paths.get("$projectDir/build/libs/steamjni/shared/windows64/steamjni.dll")
			steamJni64BitSharedLibraryDist = Paths.get("$projectDir/dist/steamjni64.dll")
		} else if (Os.isFamily(Os.FAMILY_UNIX)) {
			steamJni32BitSharedLibrary = Paths.get("$projectDir/build/libs/steamjni/shared/linux32/libsteamjni.so")
			steamJni32BitSharedLibraryDist = Paths.get("$projectDir/dist/libsteamjni.so")

			steamJni64BitSharedLibrary = Paths.get("$projectDir/build/libs/steamjni/shared/linux64/libsteamjni.so")
			steamJni64BitSharedLibraryDist = Paths.get("$projectDir/dist/libsteamjni64.so")
		} else if (Os.isFamily(Os.FAMILY_MAC)) {
			// fixme exec on osx
//			lipo -create -arch i386 ../projects/SteamNative_eclipse_gcc_osx_x86_32bit/Release/libsteam.jni32.dylib -arch x86_64 ../projects/SteamNative_eclipse_gcc_osx_x86_64bit/Release/libsteam.jni64.dylib -output libsteam.jni.dylib
		}

		steamJni32BitSharedLibraryDist.toFile().getParentFile().mkdirs()
		Files.copy(steamJni32BitSharedLibrary, steamJni32BitSharedLibraryDist, StandardCopyOption.REPLACE_EXISTING)

		steamJni64BitSharedLibraryDist.toFile().getParentFile().mkdirs()
		Files.copy(steamJni64BitSharedLibrary, steamJni64BitSharedLibraryDist, StandardCopyOption.REPLACE_EXISTING)
	}
}

artifactory {
	contextUrl = 'https://artifactory.nimblygames.com/artifactory'
	//The base Artifactory URL if not overridden by the publisher/resolver
	publish {
		//		defaults {
		//			publications ('mavenJava')
		//			publishConfigs('archives')
		//		}

		//		properties {
		//Optional closure to attach properties to artifacts based on a list of artifact patterns per project publication
		//			foo '*:*:*:*@*', platform: 'linux', 'win64'                //The property platform=linux,win64 will be set on all artifacts in foo publication
		//			mavenJava 'org.jfrog:*:*:*@*', key1: 'val1'                //The property key1=val1 will be set on all artifacts part of the mavenJava publication and with group org.jfrog
		//			all 'org.jfrog:shared:1.?:*@*', key2: 'val2', key3: 'val3' //The properties key2 and key3 will be set on all published artifacts (all publications) with group:artifact:version
		//																	   //equal to org.jfrog:shared:1.?
		//		}
		publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
		publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
		publishPom = true   //Publish generated POM files to Artifactory (true by default).
		publishIvy = false   //Publish generated Ivy descriptor files to Artifactory (true by default).
	}
	clientConfig.info.setBuildName('version')
	clientConfig.info.setBuildNumber('1')

	clientConfig.publisher.repoKey = 'gradle-release-local'
	// make a <user_home>/.gradle/gradle.properties files that contains your username and encrypted password
	// encrypted password can be created at https://artifactory.nimblygames.com/artifactory/webapp/#/profile
	clientConfig.publisher.username = rootProject.findProperty("artifactory_user")
	clientConfig.publisher.password = rootProject.findProperty("artifactory_password")
}

artifactoryPublish {
	skip = false //Skip build info analysis and publishing (false by default)
	publications('steamjnix86Publish')
	if (Os.isFamily(Os.FAMILY_WINDOWS) || Os.isFamily(Os.FAMILY_UNIX)) {
		publications('steamjnix64Publish')
	}
}

tasks {
	// no way to add depedency on nativeHeaders?
//	tasks.getByName("assembleDependentsSteamjni").dependsOn("nativeHeaders")
//	tasks.getByName("steamjniLinux32SharedLibrary").dependsOn("nativeHeaders")
//	steamjniLinux64SharedLibrary.dependsOn("nativeHeaders")
//	steamjniOsx32SharedLibrary.dependsOn("nativeHeaders")
//	steamjniOsx64SharedLibrary.dependsOn("nativeHeaders")
//	steamjniWindows32SharedLibrary.dependsOn("nativeHeaders")
//	steamjniWindows64SharedLibrary.dependsOn("nativeHeaders")
}